return(NA)
})
if(is.na(a[[i]])==TRUE){
nodes = nodes[-i,]
edges = edges[edges$source!=nodes$nodes[i] & edges$target!=nodes$nodes[i],]
}
}
is.na(a[[i]])
nodes
nodes[-i,]
nodes[-c(i),]
i
nodes
nodes$nodes
nodes
nodes <- getNodes(edges, source = "source", target = "target")
nodes
nodes[-c(i),]
class(nodes)
class( nodes[-c(i),])
data.frame(nodes[-c(i),])
a<-list()
for (i in 1:length(nodes$nodes)){
print(i)
a[[i]] = tryCatch({
expr= getUser(nodes$nodes[i])},  error = function(i) {
return(NA)
})
if(is.na(a[[i]])==TRUE){
nodes = data.frame(nodes[-c(i),])
edges = edges[edges$source!=nodes$nodes[i] & edges$target!=nodes$nodes[i],]
}
}
dim(nodes)
nodes
a
a<-list()
for (i in 1:length(nodes$nodes)){
print(i)
a[[i]] = tryCatch({
expr= getUser(nodes$nodes[i])},  error = function(i) {
return(NA)
})
if(is.na(a[[i]])==TRUE){
nodes[i,]<-NA
}
}
a
nodes <- getNodes(edges, source = "source", target = "target")
nodes$nodes[1:10]
a<-list()
for (i in 1:length(nodes$nodes)){
print(i)
a[[i]] = tryCatch({
expr= getUser(nodes$nodes[i])},  error = function(i) {
return(NA)
})
if(is.na(a[[i]])==TRUE){
nodes[i,]<-NA
}
}
nodes
a
length(nodes$nodes)
nodes$nodes
nodes[!is.na(nodes$nodes),]
nodes <- nodes[!is.na(nodes$nodes),]
sapply(a, function(x) all(is.na(x)))
a[!sapply(a, function(x) all(is.na(x)))]
a<-a[!sapply(a, function(x) all(is.na(x)))]
warnings()
a
length(a)
length(nodes$nodes)
nodes$nodes
nodes
nodes <- data.frame(nodes[!is.na(nodes$nodes),])
nodes$nodes
nodes
nodes <- data.frame(nodes)
nodes$nodes
nodes
length(a)
length(nodes$nodes)
b = sapply(a, function(x) x$lang)
c = sapply(a, function(x) x$followersCount)
nodes$group = b
nodes$size = c
library(plyr)
edges$source  = as.numeric(mapvalues(edges$source , from = nodes$nodes, to = c(0:(length(nodes$nodes)-1))))
edges$target  = as.numeric(mapvalues(edges$target , from = nodes$nodes, to = c(0:(length(nodes$nodes)-1))))
edges
edges <- edges[!is.na(edges),]
edges
edges <- edges[!is.na(edges$source) & !is.na(edges$target),]
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",
Group = "group", opacity = 0.8)
library(graphTweets)
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",
Group = "group", opacity = 0.8)
library(networkD3)
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",
Group = "group", opacity = 0.8)
c
b
?forceNetwork
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize=size,
Group = "group", opacity = 0.8)
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group = "group", opacity = 0.8)
nodes$size
nodes$size = c/max(c)
nodes$size
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group = "group", opacity = 0.8)
nodes$size
(c-mean(c))/sd(c)
nodes$size = 1+(c-mean(c))/sd(c)
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group = "group", opacity = 0.8)
nodes$size
c
nodes$size = c
freq1 = names(sort(table(edges$source), decreasing=TRUE)[1:2])
freq2 = names(sort( table(edges$target), decreasing=TRUE)[1:2])
edges=edges[edges$target %in% freq2 | edges$source %in% freq1,]
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group = "group", opacity = 0.8)
nodes$size = c/max(c)
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group = "group", opacity = 0.8)
edges
nodes
nodes$size = c
nodes[nodes$size == max(nodes$size),]
edge
edges
nodes$size = c/sd(c)
nodes$size
nodes$size = 1+c/sd(c)
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group = "group", opacity = 0.8)
edges
edges
nodes[nodes$nodes %in% unique(c(edges$source,edges$target)),]
unique(c(edges$source,edges$target))
edges <- graphTweets::getEdges(data = tweets[1:300,], tweets = "text", source = "screenName",str.length = NULL)
edges <- edges[!duplicated(edges),]
edges$source <- as.character(edges$source)
edges$target <- as.character(edges$target)
edges <- edges[(edges$source %in% gsub("((\\.+)[[:space:]]*|[\\.\\-])|[[:punct:]]", "", edges$source, perl=TRUE)) &
(edges$target %in% gsub("((\\.+)[[:space:]]*|[\\.\\-])|[[:punct:]]", "", edges$target, perl=TRUE)),]
edges <- edges[(edges$source %in% gsub(ell_def, "", edges$source, perl=TRUE)) &
(edges$target %in% gsub(ell_def, "", edges$target, perl=TRUE)),]
edges <- edges[(edges$source!="") & (edges$target!=""),]
nodes <- getNodes(edges, source = "source", target = "target")
edges
freq1 = names(sort(table(edges$source), decreasing=TRUE)[1:5])
freq2 = names(sort( table(edges$target), decreasing=TRUE)[1:5])
edges=edges[edges$target %in% freq2 | edges$source %in% freq1,]
edges
nodes <- getNodes(edges, source = "source", target = "target")
a<-list()
for (i in 1:length(nodes$nodes)){
print(i)
a[[i]] = tryCatch({
expr= getUser(nodes$nodes[i])},  error = function(i) {
return(NA)
})
if(is.na(a[[i]])==TRUE){
nodes[i,]<-NA
}
}
nodes$nodes
nodes <- nodes[!is.na(nodes$nodes),]
nodes <- data.frame(nodes)
a<-a[!sapply(a, function(x) all(is.na(x)))]
length(a)
length(nodes$nodes)
b = sapply(a, function(x) x$lang)
c = sapply(a, function(x) x$followersCount)
nodes$group = b
c
c/sd(c)
c/median(c)
1+c/median(c)
c/median(c)
nodes$size = c/median(c)
nodes$size[nodes$size >10]=10
nodes[nodes$size == max(nodes$size),1]
nodes = nodes[nodes$nodes %in% unique(c(edges$source,edges$target)),]
edges <- edges[!is.na(edges$source) & !is.na(edges$target),]
edges$source  = as.numeric(mapvalues(edges$source , from = nodes$nodes, to = c(0:(length(nodes$nodes)-1))))
edges$target  = as.numeric(mapvalues(edges$target , from = nodes$nodes, to = c(0:(length(nodes$nodes)-1))))
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group = "group", opacity = 0.8)
nodes$size = c/median(c)
nodes$size[nodes$size >20]=20
library(plyr)
nodes = nodes[nodes$nodes %in% unique(c(edges$source,edges$target)),]
edges <- edges[!is.na(edges$source) & !is.na(edges$target),]
edges$source  = as.numeric(mapvalues(edges$source , from = nodes$nodes, to = c(0:(length(nodes$nodes)-1))))
edges$target  = as.numeric(mapvalues(edges$target , from = nodes$nodes, to = c(0:(length(nodes$nodes)-1))))
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group = "group", opacity = 0.8)
edges
nodes
nodes <- getNodes(edges, source = "source", target = "target")
edges <- edges[!is.na(edges$source) & !is.na(edges$target),]
edges <- edges[!is.na(edges$source) & !is.na(edges$target),]
nodes = nodes[nodes$nodes %in% unique(c(edges$source,edges$target)),]
nodes
edges
edges <- graphTweets::getEdges(data = tweets[1:500,], tweets = "text", source = "screenName",str.length = NULL)
edges <- edges[!duplicated(edges),]
edges$source <- as.character(edges$source)
edges$target <- as.character(edges$target)
edges <- edges[(edges$source %in% gsub("((\\.+)[[:space:]]*|[\\.\\-])|[[:punct:]]", "", edges$source, perl=TRUE)) &
(edges$target %in% gsub("((\\.+)[[:space:]]*|[\\.\\-])|[[:punct:]]", "", edges$target, perl=TRUE)),]
edges <- edges[(edges$source %in% gsub(ell_def, "", edges$source, perl=TRUE)) &
(edges$target %in% gsub(ell_def, "", edges$target, perl=TRUE)),]
edges <- edges[(edges$source!="") & (edges$target!=""),]
freq1 = names(sort(table(edges$source), decreasing=TRUE)[1:5])
freq2 = names(sort( table(edges$target), decreasing=TRUE)[1:5])
edges=edges[edges$target %in% freq2 | edges$source %in% freq1,]
nodes <- getNodes(edges, source = "source", target = "target")
a<-list()
for (i in 1:length(nodes$nodes)){
print(i)
a[[i]] = tryCatch({
expr= getUser(nodes$nodes[i])},  error = function(i) {
return(NA)
})
if(is.na(a[[i]])==TRUE){
nodes[i,]<-NA
}
}
nodes$nodes
nodes <- nodes[!is.na(nodes$nodes),]
nodes <- data.frame(nodes)
a<-a[!sapply(a, function(x) all(is.na(x)))]
length(a)
length(nodes$nodes)
#a = sapply(nodes$nodes,getUser)
b = sapply(a, function(x) x$lang)
c = sapply(a, function(x) x$followersCount)
c
nodes$group = b
nodes$size = c/median(c)
nodes$size[nodes$size >20]=20
library(plyr)
edges <- edges[!is.na(edges$source) & !is.na(edges$target),]
nodes = nodes[nodes$nodes %in% unique(c(edges$source,edges$target)),]
edges$source  = as.numeric(mapvalues(edges$source , from = nodes$nodes, to = c(0:(length(nodes$nodes)-1))))
edges$target  = as.numeric(mapvalues(edges$target , from = nodes$nodes, to = c(0:(length(nodes$nodes)-1))))
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group = "group", opacity = 0.8)
write.csv(edges,"data/edges.csv", row.names=FALSE)
write.csv(nodes,"data/nodes.csv", row.names=FALSE)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
d3heatmap(heatmapdata2, dendrogram = "none",color = "Blues")
d3heatmap(heatmapdata, dendrogram = "none",color = "Blues")
write.csv(heatmapdata,"data/heatmapdata.csv", row.names=FALSE)
d3heatmap(heatmapdata, dendrogram = "none",color = "Blues")
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
edges = read.csv("data/edges.csv", stringsAsFactors = FALSE)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
edges = read.csv("data/edges.csv", stringsAsFactors = FALSE)
nodes = read.csv("data/nodes.csv", stringsAsFactors = FALSE)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group = "group", opacity = 0.8)
library(shiny)
library(leaflet)
library(RColorBrewer)
library(lazyeval)
library(dplyr)
library(lubridate)
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
library(reshape)
library(knitr)
library(d3heatmap)
library(graphTweets)
library(wordcloud2)
library(networkD3)
train = read.csv("data/train.csv")
class(train$Time)
train$Time = as.character(train$Time)
train$Time = ymd_hms(train$Time)
summary(train)
class(train$Time)
max(train$Time)
min(train$Time)
d = read.csv("data/clouddata.csv")
heatmapdata = read.csv("data/heatmapdata.csv")
heatmapdata$hours = factor(heatmapdata$hours,levels = unique(heatmapdata$hours))
heatmapdata$weekdays = factor(heatmapdata$weekdays ,levels = unique(heatmapdata$weekdays ))
heatmapdata = cast(heatmapdata, weekdays ~ hours)
heatmapdata
class(heatmapdata)
heatmapdata[is.na(heatmapdata)] = 0
edges = read.csv("data/edges.csv", stringsAsFactors = FALSE)
nodes = read.csv("data/nodes.csv", stringsAsFactors = FALSE)
heatmapdata = read.csv("data/heatmapdata.csv")
heatmapdata
names(train)
summary(train$Time)
class(train$Time)
library(lubridate)
train$weekdays = weekdays(train$Time)
train$hours = hour(train$Time)
heatmapdata = train %>% group_by(weekdays,hours) %>% summarise(tweets = sum(n()))
summary(heatmapdata)
heatmapdata
setwd("S:/Data Science Think Tank/Twitter_visual")
write.csv(heatmapdata,"data/heatmapdata.csv", row.names=FALSE)
library(reshape)
library(knitr)
library(d3heatmap)
heatmapdata$hours = factor(heatmapdata$hours,levels = unique(heatmapdata$hours))
heatmapdata$weekdays = factor(heatmapdata$weekdays ,levels = unique(heatmapdata$weekdays ))
heatmapdata2 = cast(heatmapdata, weekdays ~ hours)
heatmapdata2
class(heatmapdata2)
d3heatmap(heatmapdata2, dendrogram = "none",color = "Blues")
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
wordcloud2(data = d)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
d3heatmap(heatmapdata, dendrogram = "none",color = "Blues")
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
names(train)
summary(train$Time)
class(train$Time)
library(lubridate)
train$weekdays = weekdays(train$Time)
train$hours = hour(train$Time)
heatmapdata = train %>% group_by(weekdays,hours) %>% summarise(tweets = sum(n()))
summary(heatmapdata)
setwd("S:/Data Science Think Tank/Twitter_visual")
write.csv(heatmapdata,"data/heatmapdata.csv", row.names=FALSE)
heatmapdata = read.csv("data/heatmapdata.csv")
heatmapdata$hours = factor(heatmapdata$hours,levels = unique(heatmapdata$hours))
heatmapdata$weekdays = factor(heatmapdata$weekdays ,levels = unique(heatmapdata$weekdays ))
heatmapdata = cast(heatmapdata, weekdays ~ hours)
heatmapdata
class(heatmapdata)
heatmapdata[is.na(heatmapdata)] = 0
heatmapdata
d3heatmap(heatmapdata, dendrogram = "none",color = "Blues")
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
heatmapdata
heatmapdata[2,]<-NULL
heatmapdata <- heatmapdata[1,]
heatmapdata
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
heatmapdata = read.csv("data/heatmapdata.csv")
heatmapdata$hours = factor(heatmapdata$hours,levels = unique(heatmapdata$hours))
heatmapdata$weekdays = factor(heatmapdata$weekdays ,levels = unique(heatmapdata$weekdays ))
heatmapdata = cast(heatmapdata, weekdays ~ hours)
heatmapdata[is.na(heatmapdata)] = 0
heatmapdata <- heatmapdata[1,]
d3heatmap(heatmapdata, dendrogram = "none",color = "Blues")
heatmapdata
?random
runif(10, 5.0, 7.5)
round(runif(10, 5.0, 7.5))
heatmapdata
heatmapdata = read.csv("data/heatmapdata.csv")
heatmapdata$hours = factor(heatmapdata$hours,levels = unique(heatmapdata$hours))
heatmapdata$weekdays = factor(heatmapdata$weekdays ,levels = unique(heatmapdata$weekdays ))
heatmapdata = cast(heatmapdata, weekdays ~ hours)
heatmapdata
round(runif(10, 0, max(heatmapdata[1,])))
heatmapdata[1,]
heatmapdata = read.csv("data/heatmapdata.csv")
heatmapdata$hours = factor(heatmapdata$hours,levels = unique(heatmapdata$hours))
heatmapdata$weekdays = factor(heatmapdata$weekdays ,levels = unique(heatmapdata$weekdays ))
heatmapdata = cast(heatmapdata, weekdays ~ hours)
heatmapdata
max(heatmapdata[1,])
heatmapdata
heatmapdata[1,]
max(heatmapdata[1,-1])
round(runif(10, 0, max(heatmapdata[1,-1])))
is.na(heatmapdata)
sum(is.na(heatmapdata))
heatmapdata[is.na(heatmapdata)] <- round(runif(sum(is.na(heatmapdata)), 0, max(heatmapdata[1,-1])))
heatmapdata
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
heatmapdata
class(heatmapdata)
d3heatmap(heatmapdata, dendrogram = "none",color = "Blues")
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
nodes$gender <- "male"
dim(nodes)[1]
sample(1:dim(nodes)[1],round(0.55*dim(nodes)[1]))
nodes$gender <- "male"
nodes$gender[sample(1:dim(nodes)[1],round(0.55*dim(nodes)[1]))]<-"female"
nodes$language <- nodes$group
nodes$gender <- "male"
nodes$gender[sample(1:dim(nodes)[1],round(0.55*dim(nodes)[1]))]<-"female"
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
nodes
edges = read.csv("data/edges.csv", stringsAsFactors = FALSE)
nodes = read.csv("data/nodes.csv", stringsAsFactors = FALSE)
nodes$language <- nodes$group
nodes$gender <- "male"
nodes$gender[sample(1:dim(nodes)[1],round(0.55*dim(nodes)[1]))]<-"female"
nodes
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group = "language", opacity = 0.8)
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group = "gender", opacity = 0.8)
l<-"gender"
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group = l, opacity = 0.8)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
l
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group =l, opacity = 0.8)
forceNetwork(Links = edges, Nodes = nodes, Source = "source",
Target = "target",  NodeID = "nodes",Nodesize="size",
Group =l, opacity = 0.8)
nodes
nodes$language <- nodes$group
nodes$gender <- "male"
nodes$gender[sample(1:dim(nodes)[1],round(0.55*dim(nodes)[1]))]<-"female"
nodes
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
d3heatmap(heatmapdata, dendrogram = "none",color = "Blues")
heatmapdata
d3heatmap(heatmapdata, dendrogram = "none")
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
library(shiny)
runApp('S:/Data Science Think Tank/Twitter_visual',host="0.0.0.0",port=5050)
d3heatmap(heatmapdata, dendrogram = "none",color = "Blues")
